worker_processes auto;

events {
    worker_connections 3000;
    
    use epoll;
}

http {
    access_log        off;
	sendfile          on;

    # send headers in one piece, it is better than sending them one by one
    tcp_nopush on;

    # don't buffer data sent, good for small data bursts in real time
    tcp_nodelay on;

    # if client stop responding, free up memory -- default 60
    send_timeout 2;

    # allow the server to close connection on non responding client, this will free up memory
    reset_timedout_connection on;
    
    upstream api {
        server api1:3000 max_fails=3 fail_timeout=30s;
        server api2:3000 max_fails=3 fail_timeout=30s;
        keepalive 500;
    }

    server {
        listen 9999;
        
        location / {
            proxy_pass http://api;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_cache_bypass $http_upgrade;
            # proxy_set_header Host $host;
            # proxy_set_header X-Real-IP $remote_addr;
            # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # proxy_set_header X-Forwarded-Proto $scheme;
            # proxy_read_timeout 120s;
            # proxy_connect_timeout 120s;
        }
    }
}
